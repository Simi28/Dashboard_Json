name: Deploy Dashboard via NerdGraph

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'Region (us or eu)'
        required: true
        default: 'us'

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      API_KEY: ${{ secrets.API_KEY }}
      ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
      ACCOUNT_IDS: ${{ secrets.ACCOUNT_IDS }}
      GH_PAT: ${{ secrets.GH_PAT }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set NerdGraph API URL based on region
        run: |
          if [[ "${{ github.event.inputs.region }}" == "eu" ]]; then
            echo "NERDGRAPH_URL=https://api.eu.newrelic.com/graphql" >> $GITHUB_ENV
          else
            echo "NERDGRAPH_URL=https://api.newrelic.com/graphql" >> $GITHUB_ENV
          fi

      - name: Replace placeholders in template
        run: |
          mkdir -p rendered
          sed "s/{{ACCOUNT_ID}}/${ACCOUNT_ID}/g; s/{{ACCOUNT_IDS}}/${ACCOUNT_IDS}/g" templates/dashboard_template.json > rendered/dashboard.json

      - name: Create GraphQL payload
        run: |
          DASHBOARD=$(jq . rendered/dashboard.json)
          ACCOUNT_ID_INT=$(echo "$ACCOUNT_ID" | jq -r '. | tonumber')

          echo "{
            \"query\": \"mutation CreateDashboard(\$accountId: Int!, \$dashboard: DashboardInput!) {
              dashboardCreate(accountId: \$accountId, dashboard: \$dashboard) {
                entityResult { guid }
                errors { description }
              }
            }\",
            \"variables\": {
              \"accountId\": $ACCOUNT_ID_INT,
              \"dashboard\": $DASHBOARD
            }
          }" > rendered/payload.json

      - name: Deploy to New Relic via NerdGraph
        run: |
          echo "ðŸš€ Deploying dashboard to $NERDGRAPH_URL"
          curl --request POST \
            --url $NERDGRAPH_URL \
            --header "Content-Type: application/json" \
            --header "API-Key: $API_KEY" \
            --data @rendered/payload.json \
            --silent --show-error --fail > rendered/response.json

      - name: Save dashboard GUID
        run: |
          jq -r '.data.dashboardCreate.entityResult.guid' rendered/response.json > rendered/guid.txt
          echo "âœ… Dashboard GUID saved to rendered/guid.txt"

      - name: Commit GUID to repo
        env:
          REPO: ${{ github.repository }}
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          git remote set-url origin https://x-access-token:${GH_PAT}@github.com/${REPO}
          git add rendered/guid.txt
          if git diff --cached --quiet; then
            echo "âœ… Nothing to commit"
          else
            git commit -m "Update dashboard GUID"
            git push origin HEAD:${{ github.ref_name }}
          fi
